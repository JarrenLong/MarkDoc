<?php
/**
 * MarkDoc, the easy website builder.
 *
 * @category   WebsiteBuilder
 * @package    MarkDoc
 * @version    v0.0.x
 * @author     Jarren Long <jlong@booksnbytes.net>
 * @copyright  2018 Books N' Bytes, Inc.
 * @link       https://markdoc.booksnbytes.net
 * @license    https://markdoc.booksnbytes.net
 */


// Require that the Markdown rendering engine be present
require_once("Parsedown.php");


/**
 * The MarkDoc class is the powerhouse of MarkDoc. All of the magic happens here.
 */
class MarkDoc {

  // {{{ Constants

  /**
   * MarkDoc API Version
   */
  const Version = "v0.0.x";
  /**
   * Default HTTP GET request variable to define the path to the markdown file to render
   */
  const requestVar = "p";

  const mdFile = ".md";
  const page_default = "index.md";
  const page_tic = "tic.md";
  const page_toc = "toc.md";
  const page_wp = "wp-import.md";

  // }}}
  // {{{ Private functions

  /**
   * Makes a directory if it does not already exist (supports nested directory creation)
   *
   * @param string $path  Relative path of the directory to create
   * @return boolean      True if the directory is created/exists, or false on error
   */
  private function safeMkdir($path) {
    $p = './' . str_replace(getcwd(), '', $path);
    if(!file_exists($p)) {
      return mkdir($p, 0775, true);
    }
    return true;
  }

  /**
   * Downloads a file from a remote URL to the destination on this server
   *
   * @param string $url   URL to the resource to download to this server
   * @param string $dest  Destination path on this server for the downloaded file
   */
  private function downloadFromURL($url, $dest) {
    safeMkdir(dirname($dest));
    file_put_contents($dest, fopen($url, 'rb'));
  }

  /**
   * Checks if a string starts with another string
   * @param string $haystack  The string to check
   * @param string $needle    The string to check for
   */
  private function startsWith($haystack, $needle) {
    $length = strlen($needle);
    return (substr($haystack, 0, $length) === $needle);
  }

  /**
   * Checks if a string ends with another string
   *
   * @param string $haystack  The string to check
   * @param string $needle    The string to check for
   */
  private function endsWith($haystack, $needle) {
    $length = strlen($needle);
    if ($length == 0) {
      return true;
    }

    return (substr($haystack, -$length) === $needle);
  }

  /**
   * Check if a string contains another string
   *
   * @param string $haystack  The string to check
   * @param string $needle    The string to check for
   */
  private function contains($haystack, $needle) {
    return (strpos($haystack, $needle) !== false);
  }

  /**
   * Recursively get all files in the specified directory
   *
   * @param string $dir       The directory to recursively search
   * @param string $fileType  The types of files that will be added to the file array
   * @param array  $results   Reference to the results array (for recursive calls only)
   * @return array            An array of all files in the specified directory and all child directories
   */
  private function getDirContents($dir, $fileType, &$results = array()){
    $files = scandir($dir);

    foreach($files as $key => $value){
      $path = realpath($dir.DIRECTORY_SEPARATOR.$value);
      if(!is_dir($path) && $this->endsWith($path, $fileType)) {
        $results[] = $path;
      } else if($value != "." && $value != "..") {
        $this->getDirContents($path, $fileType, $results);
        if($this->endsWith($path, $fileType)) {
          $results[] = $path;
        }
      }
    }

    return $results;
  }

  /**
   * Regenerate the Table of Contents file
   */
  private function generateTOC() {
    $baseDir = getcwd() . "/";
    $allFiles = $this->getDirContents($baseDir, self::mdFile);

    $toc = fopen("toc.md", "w");
    fwrite($toc, "# Table of Contents\n\n");

    foreach($allFiles as &$p) {
      $tmp = str_replace($baseDir, '', $p);
      $tmp = str_replace(self::mdFile,'',$tmp);
      fwrite($toc, ' * [' . $tmp . '](http://' . $_SERVER["SERVER_NAME"] . '?' . self::requestVar . '=' . $tmp . ")\n");
    }

    fwrite($toc, "\n###### Generated by MarkDoc. &copy; 2018 [Books N' Bytes, Inc.](https://www.booksnbytes.net)\n");
    fclose($toc);
  }

  /**
   * Imports all published posts from the specified Wordpress database as Markdown files
   *
   * @param string $wpHost    The host of the mysql WP database
   * @param string $wpUser    MySQL username
   * @param string $wpPass    MySQL password
   * @param string $wpDbName  The name of the WP database
   */
  private function importFromWP($wpHost, $wpUser, $wpPass, $wpDbName) {
    $q = "SELECT CONCAT('Posted by ', U.display_name, ' at ', P.post_date) as posted_by, P.post_title, P.post_content FROM wp_posts P LEFT JOIN wp_users U ON P.post_author=U.ID WHERE post_type='post' and post_status='publish'";

    $conn = new mysqli($wpHost, $wpUser, $wpPass, $wDbName);
    $res = $conn->query($q);

    if($res->num_rows > 0) {
      while($row = $res->fetch_assoc()) {
        $fn = "posts/" . str_replace(" ", "_", $row["post_title"]) . self::mdFile;
        $contents = "# " .
            $row["post_title"] .
            "\n\n### " .
            $row["posted_by"] .
            "\n\n" .
            $row["post_content"];
        file_put_contents($fn, $contents);
      }
    }
  }

  // }}}
  // {{{ Public functions

  /**
   * Handles request processing for MarkDoc
   *
   * @param string $url  The URL to the markdown resource to render
   * @return string      A HTML string of the converted markdown file
   */
  public function processRequest($uri) {

    // Find the requested file
    $page = htmlspecialchars($uri);

    // Failover to default page
    if($page == null || $page == '' || $page == '/') {
      $page = self::page_default;
    } else {
      $rv = '?' . self::requestVar . '=';

      if($this->contains($page, $rv)) {
        $pos = strpos($page, $rv);
        $page = substr($page, $pos + strlen($rv));
      } else {
        $page = substr($page, 1);
      }
    }

    // No parent relative paths
    $page = str_replace("..", "", $page);

    // Make sure we're only looking at markdown files
    if(!$this->endsWith($page, self::mdFile)) {
      $page = $page . self::mdFile;
    }

    if($page == self::page_wp) {
      // Pull posts out of a WP db and dump them into MD files
      $this->importFromWP('localhost','docs','P@ssword1!','docs');
      $page = self::page_tic;
    }

    if($page == self::page_tic) {
      // Regenerate the TOC
      $this->generateTOC();
      $page = self::page_toc;
    }

    // Failover to index if required file does not exist
    if(!file_exists($page)) {
      $page = self::page_default;
    }

    // Read and render the markdown file
    $md = file_get_contents($page);
    $Parsedown = new Parsedown();
    return $Parsedown->text($md);
  }

  // }}}

}
?>
